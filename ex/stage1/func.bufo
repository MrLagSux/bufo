let i32 = @integer(32);
let i64 = @integer(64);
let f32 = @float(32);
let type = @anytype();
let value = @anyvalue();
let none = @none();

// let foo = pow(i32.bitsize, 2);
// let bar = createList(i32, foo);

let createList = func (t: type, size: i32) -> type {
    return struct {
        //elements: [t; size];
    };
};

// TODO: Actually call functions
//let ListI32 = ArrayList(i32);

// TODO: Figure out what we can evaluate at compile time
/*
// Struct size depends on value that might only be known at compile time
let create = func (size: i32) -> type {
    return struct {
        elements: [i32; size];
    };
};
// Easy:
let foo = create(5);
// Do we really want to open the file at compile time? :^)
let file = openFile("whatever.txt");
let bar = create(file.length);
*/

// TODO: Come up with a way to denote function types
/*
let addN = func (n: i32) -> <func...> {
    return func (x: i32) -> i32 {
        return x + n;
    };
};
let map = func (..., f: <func...>) -> ... {};
*/

let ArrayList = func (elemType: type) -> type {
    return struct {
        length: usize;
        element: elemType;

        let push = func (self: @Self(), elem: elemType) {
        };
    };
};

let step1 = func (t: type) -> t {};
let step21 = func (i: i32) -> i32 {};
let step22 = func (t: type) -> i32 {};
let step31 = func (t: type) -> type {};
let step32 = func (v: i32) -> type {};
let step33 = func () -> type {};

// Final boss
// NOTE: Even though the function is generic, it should always trigger an error because t1 is a type, but f2 wants a value
/*
let f1 = func(
    f2: func (v1: i32, v2: i32) -> i32,
    t1: type,
    t2: type
) -> f2(t1, t2) {};
*/
