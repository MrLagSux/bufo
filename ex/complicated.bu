class Test {
    a: i64;
    b: Test;
    c: i64;
    d: i64;
    constructor(na: i64, nb: i64, nc: i64) -> Test {
        this.a = na;
        // this.b = Test(0, 0, 0);
        this.c = nc;
        // this.d gets 0 initialized
    }
    func foo(b: i32) -> i64 {
        return this.d;
    }

    func fee(b: i32) -> i32 {
        return b;
    }

    func faa() {}
}

class Idee {
    a: i64;
    t: Test;

    constructor(na: i64) {
        this.a = na;
        this.t = Test(this.a, 5, 10);
        let a: i64 = this.a;
        this.t.b.b.b.b.b.b.a = 10;
    }
}

func bla(t: Test, t1: Test) -> i64 {
    return t.d + t1.d;
}

func retInstance(t: Test) -> Idee {
    return Idee(t.d);
}

func main() {
    let test: Test = Test(2, 3, 4);
    let idee: Idee = retInstance(test);
    let e: i32 = 0;
    let a: u64[3, 3] = [
         [1 - 3, 2 * 4, 3 / 5],
         [1 - 3, 2 * 4, 3 / 5],
         [1 - 3, 2 * 4, 3 / 5],
    ];
    let d: i32 = 9;
    d = 0;
    test.d = 10;
    idee.a = 12;
    let f: i64 = test.foo(5);
    if (d == 1) {

    } else {

    }
}