const false = @boolean()(0);
const true = @boolean()(1);

const none = @none();

const u8 = @integer(8, false);
const u16 = @integer(16, false);
const u32 = @integer(32, false);

const i32 = @integer(32, true);

const foo = func (a: i32) -> i32 {
    let b = 1;
    return a + b;
};

const ack = func (m: u32, n: u32) -> u32 {
    return if m == 0 n + 1
        else if n == 0 ack(m - 1, 1)
        else ack(m - 1, ack(m, n - 1));
};

const main = func () -> u32 {
    let a = u16(1);
    const factorial = func (n: @typeof(a)) -> @typeof(a) {
        return if n == 1 1 else n * factorial(n - 1);
    };
    let b = factorial(5);
    @assert(@typeof(b) == @typeof(a));
};

@entry(main);
