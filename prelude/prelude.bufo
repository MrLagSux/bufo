// All libc functions are unsafe, because C-compliance is not guaranteed yet.

// TODO: Implement safe wrapper for everything :^)
// TODO: Move all of the externals into `libc.bufo`

// Strings
unsafe extern strlen(string: &str) -> usize;

// Memory
// TODO: IMPORTANT: Some way to do null checks
unsafe extern malloc(bytes: usize) -> Any;
unsafe extern calloc(num: usize, size: usize) -> Any;
unsafe extern realloc(ptr: Any, new_size: usize) -> Any;
unsafe extern free(ptr: Any);
unsafe extern memcpy(dest: Any, src: Any, count: usize) -> Any;

// File IO
unsafe extern fopen(filename: &str, mode: &str) -> Any;
// FIXME: Any ignores Mutability :^) We should probably only write to mutable buffers tho...
unsafe extern fread(buffer: Any, size: usize, count: usize, stream: Any) -> usize;
unsafe extern fclose(stream: Any) -> i32;
unsafe extern fprintf(stream: Any, msg: &str, ...);

// Console IO
unsafe extern printf(msg: &str, ...) -> usize;
unsafe extern fdopen(fd: i32, mode: &str) -> Any;

unsafe extern exit(code: i32);

// Internal Runtime Errors
func index_oob(msg: &str, index: i64) {
    unsafe {
        let stderr: Any = fdopen(2, "w");
        fprintf(stderr, msg, index);
        exit(1);
    }
}

func assert(cond: bool, msg: &str) {
    unsafe {
        if (!cond) {
            let stderr: Any = fdopen(2, "w");
            fprintf(stderr, "ASSERTION FAILED: %s\n", msg);
            exit(1);
        }
    }
}