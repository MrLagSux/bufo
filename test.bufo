const bool = @boolean();
const true = bool(1);
const false = bool(0);

const type = @anytype();
const none = @none();

const u8 = @integer(8, false);
const u32 = @integer(32, false);
const u64 = @integer(64, false);

const i32 = @integer(32, true);
const i64 = @integer(64, true);

// FIXME: This should evaluate `usize` instead of saying "error, if-branch is u64 and else-branch is u32"
// Ideally, all of these `let`s should be `const` to indicate compile time known values

// const i1 = u8(1);
// const i2 = u8(2);
// const usize = if i1 == i2 u64 else u32;
// @check(usize);

// Shut up the Type Checker :^)
@check(true);
@check(type);
@check(none);
@check(u8);
@check(u64);
@check(i32);
@check(i64);

let ack = func (m: u32, n: u32) -> u32 {
    return if m == 0 n + 1
        else if n == 0 ack(m - 1, 1)
        else ack(m - 1, ack(m, n - 1));
};

let test1 = func () -> u32 {
    let m = u32(3);
    let n = u32(2);
    return ack(m, n);
};

let test2 = test1;

let other = func (a: *i32, b: i32) -> i32 {
    let old = *a;
    *a = b;
    return old;
};

const main = func () -> i32 {
    let value = test2();
    i32 = 1;
    if value != 29 {
        return 1;
    }
    let a = i32(5);
    let b = i32(10);
    let c = other(&a, b);
    if c != b {
        return 2;
    }
    if c != a {
        return 3;
    }
    if a != b {
        return 4;
    }
    return 0;
};

@entry(main);
