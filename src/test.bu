struct Idee {
    a: u64
}
struct Bla {
    a: usize,
    b: i32,
    d: Idee,
}

// Recursive Struct Definitions are working so far
struct Test {
    f: u64,
    b: i32,
    c: Bla,
}

// Param = Struct
// Pass by Reference vs Value
func bla(t: Test, t1: Test) -> Bla {
    let a: u64 = t.c.d.a;
    let b: Bla = Bla {
        a: 0,
        b: 0,
        d: Idee {
            a: a + a
        }
    };
    // ReturnType = Struct
    // Pass by Reference vs Value
    return b;
}

func main() {
    let a: u64[3] = [
        1, 2, 3
    ];

    // Array of Structs
    let ideeArr: Idee[3] = [
        Idee {
            a: 500
        },
        Idee {
            a: 10
        },
        Idee {
            a: 5
        }
    ];
    let t: Test = Test {
        f: 5,
        b: 10,
        c: Bla {
            a: 0,
            b: 0,
            d: Idee {
                a: a[1] + 5
            },
        }
    };

    // .d is Type Idee
    // Assign StructAccess Arr[Struct]
    t.c.d = ideeArr[0];

    // t is Type Test
    // Arg = Struct
    // Pass by Reference vs Value
    // Handle Move to registers properly
    bla(t, t);

    // Assign StructAccess StructAccess
    t.c.d.a = t.f;

    // Assign StructAccess Expr
    t.f = 50;
}