func nextStep(left: u32, center: u32, right: u32) -> u32 {
    let v: u32 = left * 4 + center * 2 + right;
    if (v == 0) { return 0; }
    if (v == 1) { return 1; }
    if (v == 2) { return 1; }
    if (v == 3) { return 1; }
    if (v == 4) { return 0; }
    if (v == 5) { return 1; }
    if (v == 6) { return 1; }
    return 0;
}

func rule110(step: u32,
        a: u32, b: u32, c: u32, d: u32, e: u32,
        f: u32, g: u32, h: u32, i: u32, j: u32,
        k: u32, l: u32, m: u32, n: u32, o: u32,
        p: u32, q: u32, r: u32, s: u32, t: u32) -> u32 {
    if (step >= 20) {
        return step;
    }
    let nstep: u32 = step + 1;
    let na: u32 = nextStep(0, a, b);
    let nb: u32 = nextStep(a, b, c);
    let nc: u32 = nextStep(b, c, d);
    let nd: u32 = nextStep(c, d, e);
    let ne: u32 = nextStep(d, e, f);
    let nf: u32 = nextStep(e, f, g);
    let ng: u32 = nextStep(f, g, h);
    let nh: u32 = nextStep(g, h, i);
    let ni: u32 = nextStep(h, i, j);
    let nj: u32 = nextStep(i, j, k);
    let nk: u32 = nextStep(j, k, l);
    let nl: u32 = nextStep(k, l, m);
    let nm: u32 = nextStep(l, m, n);
    let nn: u32 = nextStep(m, n, o);
    let no: u32 = nextStep(n, o, p);
    let np: u32 = nextStep(o, p, q);
    let nq: u32 = nextStep(p, q, r);
    let nr: u32 = nextStep(q, r, s);
    let ns: u32 = nextStep(r, s, t);
    let nt: u32 = nextStep(s, t, 0);
    return rule110(nstep,
                na, nb, nc, nd, ne, nf, ng, nh, ni, nj,
                nk, nl, nm, nn, no, np, nq, nr, ns, nt);
}

func ack(m: u32, n: u32) -> u32 {
    if (m == 0) { return n + 1; }
    if (n == 0) { return ack(m - 1, 1); }
    else { return ack(m - 1, ack(m, n - 1)); }
}

func factorial(n: u32) -> u32 {
    if (n <= 1) { return 1; }
    return n * factorial(n - 1);
}

func test(n: u32, m: u32) -> u32 {
    n = n - 1;
    if (n > m) { return test(m, n); }
    return n * n + m * m - (n / (m + 5));
}

func main() {
    let a: u32 = factorial(ack(factorial(2), factorial(2)));
    let b: u32 = rule110(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
    let c: u32 = test(10, 8);
    
    let v: i32 = 5;
    let arr1: i32[1, 1] = [[42069]];
    let arr: i32[2, 2, 3] = [
        [
            [v * v - 3, 1, 2],
            [3, 4, 5],
        ],
        [
            [6, 7, arr1[0, 0]],
            [9, 10, 11],
        ]
    ];
    let b1: usize = 2;
    let a1: i32 = arr[1, 1, b1];
    arr[0, 1, b1] = 409 + a1;
    test(1, 1);
    main();
    return;
}