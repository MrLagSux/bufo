File = {Fn};

Fn = "func" "name" ParamList ["->" Type] Block;

Param = "name" TypeDecl;
ParamList = "(" [Param {"," Param}] ")";

Block = "{" {Stmt} "}";

Stmt = StmtExpr
     | StmtLet
     | StmtAssign
     | StmtIf
     | StmtReturn;

StmtExpr = ExprCall ";";
StmtLet = "let" "name" TypeDecl "=" (Expr | ExprArrayLiteral) ";";
StmtAssign = "name" | ExprArray "=" Expr ";";
StmtIf = "if" "(" ExprComp ")" Block ["else" Block];
StmtReturn = "return" [Expr] ";";

TypeDecl = ":" Type;
Type = "i32" | "i64" | "u32" | "u64" | "usize";

Arg = Expr;
ArgList = "(" [Arg {"," Arg}] ")";

Expr = ExprName
     | ExprArrayAccess
     | ExprLiteral
     | ExprBinary
     | ExprComp
     | ExprParen
     | ExprCall;
ExprName = "name";
ExprArrayLiteral = "[" Expr {"," Expr} "]";
ExprArrayAccess = "name" ExprArrayLiteral;
ExprLiteral = "int";
ExprBinary = Expr ("+" | "-" | "*" | "/") Expr;
ExprComp = Expr ("==" | "!=" | "<" | ">" | "<=" | ">=") Expr;
ExprParen = "(" Expr ")";
ExprCall = "name" ArgList;