class Foo {
    t: Test;
    // feat new(this: Foo) {}
    // feat new() -> Foo {}
    // func foo(this: Foo) {}
    // func foo(a: u32, this: Foo) {}
}

class Test {
    f: Foo;
    a: i32;
    feat new() {
        this.a = 10;
    }

    func foo(a: i32) {
        this.a = a;
    }
}

func ack(m: u32, n: u32) -> u32 {
    if (m == 0) { return n + 1; }
    if (n == 0) { return ack(m - 1, 1); }
    return ack(m - 1, ack(m, n - 1));
}

// func f(a: i32, b: i32, c: i32, d: i32, e: i32) {}

// func foo(a: i32, a: i32) {}

// func faa() -> i32 { return; }

func foo() -> i32[3] {
    return [1, 2, 3];
}

func main() {
    let a: u32 = ack(3, 5);
    let c: i32 = 1 + 1 + 1;
    let arr: i32[1, 1] = [[1]];
    let index: usize = 1;
    arr[index, 1] = 2;
    let t: Test = Test();
    let ba: i32 = t.a;
    //foo();
}