import "bufo_s1.bufo";

func VECTOR_KIND_TYPE() -> usize { return 0; }
func VECTOR_KIND_STMT() -> usize { return 1; }
func VECTOR_KIND_FUNC_PARAM() -> usize { return 2; }
func VECTOR_KIND_FUNC_DEF() -> usize { return 3; }
func VECTOR_KIND_FIELD() -> usize { return 4; }
func VECTOR_KIND_FUNC_DECL() -> usize { return 5; }
func VECTOR_KIND_REALIZE() -> usize { return 6; }
func VECTOR_KIND_QUIRK() -> usize { return 7; }
func VECTOR_KIND_STRUCT() -> usize { return 8; }
func VECTOR_KIND_MODULE() -> usize { return 9; }
func VECTOR_KIND_TYPE_DEF() -> usize { return 10; }
func VECTOR_KIND_PAIR_STRING_EXPR() -> usize { return 11; }

func vecKindToString(kind: usize) -> &str {
    if (kind == VECTOR_KIND_TYPE()) return "VECTOR_KIND_TYPE";
    else if (kind == VECTOR_KIND_STMT()) return "VECTOR_KIND_STMT";
    else if (kind == VECTOR_KIND_FUNC_PARAM()) return "VECTOR_KIND_FUNC_PARAM";
    else if (kind == VECTOR_KIND_FUNC_DEF()) return "VECTOR_KIND_FUNC_DEF";
    else if (kind == VECTOR_KIND_FIELD()) return "VECTOR_KIND_FIELD";
    else if (kind == VECTOR_KIND_FUNC_DECL()) return "VECTOR_KIND_FUNC_DECL";
    else if (kind == VECTOR_KIND_REALIZE()) return "VECTOR_KIND_REALIZE";
    else if (kind == VECTOR_KIND_QUIRK()) return "VECTOR_KIND_QUIRK";
    else if (kind == VECTOR_KIND_STRUCT()) return "VECTOR_KIND_STRUCT";
    else if (kind == VECTOR_KIND_MODULE()) return "VECTOR_KIND_MODULE";
    else if (kind == VECTOR_KIND_TYPE_DEF()) return "VECTOR_KIND_TYPE_DEF";
    else todo_with_msg("Unknown kind in vecKindToString()");
    return "";
}

struct Vec {
    elements: Any;
    kind: usize;
    elemSize: usize;
    length: usize;
    capacity: usize;

    func print(&this) {
        unsafe { printf("this: %p\n", this); }
        unsafe { printf("kind = %s\n", vecKindToString(this.kind)); }
        unsafe { printf("elemSize = %llu\n", this.elemSize); }
        unsafe { printf("length = %llu\n", this.length); }
        unsafe { printf("capacity = %llu\n", this.capacity); }
    }

    func len(&this) -> usize {
        return this.length;
    }
    func resizeIfNecessary(&mut this) {
        if (this.length >= this.capacity) this.resize(2 * this.capacity);
    }
    func resize(&mut this, mut new_cap: usize) {
        if (new_cap == 0) new_cap = 1;
        assert(this.elemSize != 0);
        unsafe {
            // printf("[DEBUG] Resizing Vector (kind = %s), old address = %p, old capacity = %llu\n", vecKindToString(this.kind), this.elements, this.capacity);
            this.elements = realloc(this.elements, new_cap * this.elemSize);
            assert_with_msg(!isNull(this.elements), "Could not allocate buffer for Vector");
            this.capacity = new_cap;
            // printf("[DEBUG] Resize success (kind = %s), new address = %p, new capacity = %llu\n", vecKindToString(this.kind), this.elements, this.capacity);
        }
    }
    func drop(&mut this) {
        // FIXME: This will not work properly
        unsafe {
            free(this.elements);
        }
    }
    func pushType(&mut this, typ: &Type) {
        assert_with_msg(this.kind == VECTOR_KIND_TYPE(), "Attempted to insert Type into non-Type Vector.");
        this.resizeIfNecessary();
        unsafe {
            let _idk: Any = this.elements;
            mut _sb: &mut Type = &mut *_idk;
            *(_sb + this.elemSize * this.length) = *typ;
        }
        this.length = this.length + 1;
    }
    func pushStruct(&mut this, strukt: &Struct) {
        assert_with_msg(this.kind == VECTOR_KIND_STRUCT(), "Attempted to insert Struct into non-Struct Vector.");
        this.resizeIfNecessary();
        unsafe {
            let _idk: Any = this.elements;
            mut _sb: &mut Struct = &mut *_idk;
            *(_sb + this.elemSize * this.length) = *strukt;
        }
        this.length = this.length + 1;
    }
    func pushRealize(&mut this, real: &Realize) {
        assert_with_msg(this.kind == VECTOR_KIND_REALIZE(), "Attempted to insert Realize into non-Realize Vector.");
        this.resizeIfNecessary();
        unsafe {
            let _idk: Any = this.elements;
            mut _rb: &mut Realize = &mut *_idk;
            *(_rb + this.elemSize * this.length) = *real;
        }
        this.length = this.length + 1;
    }
    func pushQuirk(&mut this, quirk: &Quirk) {
        assert_with_msg(this.kind == VECTOR_KIND_QUIRK(), "Attempted to insert Quirk into non-Quirk Vector.");
        this.resizeIfNecessary();
        unsafe {
            let _idk: Any = this.elements;
            mut _qb: &mut Quirk = &mut *_idk;
            *(_qb + this.elemSize * this.length) = *quirk;
        }
        this.length = this.length + 1;
    }
    func pushFuncDecl(&mut this, funcDecl: &FuncDecl) {
        assert_with_msg(this.kind == VECTOR_KIND_FUNC_DECL(), "Attempted to insert FuncDecl into non-FuncDecl Vector.");
        this.resizeIfNecessary();
        unsafe {
            let _idk: Any = this.elements;
            mut _fb: &mut FuncDecl = &mut *_idk;
            *(_fb + this.elemSize * this.length) = *funcDecl;
        }
        this.length = this.length + 1;
    }
    func pushFuncDef(&mut this, funcDef: &FuncDef) {
        assert_with_msg(this.kind == VECTOR_KIND_FUNC_DEF(), "Attempted to insert FuncDef into non-FuncDef Vector.");
        this.resizeIfNecessary();
        unsafe {
            let _idk: Any = this.elements;
            mut _fb: &mut FuncDef = &mut *_idk;
            *(_fb + this.elemSize * this.length) = *funcDef;
        }
        this.length = this.length + 1;
    }
    func pushStmt(&mut this, stmt: &Stmt) {
        assert_with_msg(this.kind == VECTOR_KIND_STMT(), "Attempted to insert Stmt into non-Stmt Vector.");
        this.resizeIfNecessary();
        unsafe {
            let _idk: Any = this.elements;
            mut _sb: &mut Stmt = &mut *_idk;
            *(_sb + this.elemSize * this.length) = *stmt;
        }
        this.length = this.length + 1;
    }
    func pushField(&mut this, field: &Field) {
        assert_with_msg(this.kind == VECTOR_KIND_FIELD(), "Attempted to insert Field into non-Field Vector.");
        this.resizeIfNecessary();
        unsafe {
            let _idk: Any = this.elements;
            mut _fb: &mut Field = &mut *_idk;
            *(_fb + this.elemSize * this.length) = *field;
        }
        this.length = this.length + 1;
    }
    func pushFuncParam(&mut this, fParam: &FuncParam) {
        assert_with_msg(this.kind == VECTOR_KIND_FUNC_PARAM(), "Attempted to insert FuncParam into non-FuncParam Vector.");
        this.resizeIfNecessary();
        unsafe {
            let _idk: Any = this.elements;
            mut _fb: &mut FuncParam = &mut *_idk;
            *(_fb + this.elemSize * this.length) = *fParam;
        }
        this.length = this.length + 1;
    }
    func pushTypeDef(&mut this, tDef: &TypeDef) {
        assert_with_msg(this.kind == VECTOR_KIND_TYPE_DEF(), "Attempted to insert TypeDef into non-TypeDef Vector.");
        this.resizeIfNecessary();
        unsafe {
            let _idk: Any = this.elements;
            mut _tb: &mut TypeDef = &mut *_idk;
            *(_tb + this.elemSize * this.length) = *tDef;
        }
        this.length = this.length + 1;
    }
    func pushPairTokenExpr(&mut this, pse: &PairTokenExpr) {
        assert_with_msg(this.kind == VECTOR_KIND_PAIR_STRING_EXPR(), "Attempted to insert PairTokenExpr into non-PairTokenExpr Vector.");
        this.resizeIfNecessary();
        unsafe {
            let _idk: Any = this.elements;
            mut _pb: &mut PairTokenExpr = &mut *_idk;
            *(_pb + this.elemSize * this.length) = *pse;
        }
        this.length = this.length + 1;
    }
    func getModule(&this, index: usize) -> &Module {
        assert_with_msg(this.kind == VECTOR_KIND_MODULE(), "Attempted to get Module of a non-Module Vector.");
        assert_with_msg(index < this.length, "Attempted to index out of bounds!");
        unsafe {
            let _b: Any = this.elements;
            let _m: &Module = &*_b;
            return _m + this.elemSize * index;
        }
    }
    func getStruct(&this, index: usize) -> &Struct {
        assert_with_msg(this.kind == VECTOR_KIND_STRUCT(), "Attempted to get Struct of a non-Struct Vector.");
        assert_with_msg(index < this.length, "Attempted to index out of bounds!");
        unsafe {
            let _b: Any = this.elements;
            let _m: &Struct = &*_b;
            return _m + this.elemSize * index;
        }
    }
    func getQuirk(&this, index: usize) -> &Quirk {
        assert_with_msg(this.kind == VECTOR_KIND_QUIRK(), "Attempted to get Quirk of a non-Quirk Vector.");
        assert_with_msg(index < this.length, "Attempted to index out of bounds!");
        unsafe {
            let _b: Any = this.elements;
            let _m: &Quirk = &*_b;
            return _m + this.elemSize * index;
        }
    }
    func getRealize(&this, index: usize) -> &Realize {
        assert_with_msg(this.kind == VECTOR_KIND_REALIZE(), "Attempted to get Realize of a non-Realize Vector.");
        assert_with_msg(index < this.length, "Attempted to index out of bounds!");
        unsafe {
            let _b: Any = this.elements;
            let _m: &Realize = &*_b;
            return _m + this.elemSize * index;
        }
    }
    func getFuncDef(&this, index: usize) -> &FuncDef {
        assert_with_msg(this.kind == VECTOR_KIND_FUNC_DEF(), "Attempted to get FuncDef of a non-FuncDef Vector.");
        assert_with_msg(index < this.length, "Attempted to index out of bounds!");
        unsafe {
            let _b: Any = this.elements;
            let _m: &FuncDef = &*_b;
            return _m + this.elemSize * index;
        }
    }
    func getFuncDecl(&this, index: usize) -> &FuncDecl {
        assert_with_msg(this.kind == VECTOR_KIND_FUNC_DECL(), "Attempted to get FuncDecl of a non-FuncDecl Vector.");
        assert_with_msg(index < this.length, "Attempted to index out of bounds!");
        unsafe {
            let _b: Any = this.elements;
            let _m: &FuncDecl = &*_b;
            return _m + this.elemSize * index;
        }
    }
    func getFuncParam(&this, index: usize) -> &FuncParam {
        assert_with_msg(this.kind == VECTOR_KIND_FUNC_PARAM(), "Attempted to get FuncParam of a non-FuncParam Vector.");
        assert_with_msg(index < this.length, "Attempted to index out of bounds!");
        unsafe {
            let _b: Any = this.elements;
            let _m: &FuncParam = &*_b;
            return _m + this.elemSize * index;
        }
    }
    func getStmt(&this, index: usize) -> &Stmt {
        assert_with_msg(this.kind == VECTOR_KIND_STMT(), "Attempted to get Stmt of a non-Stmt Vector.");
        assert_with_msg(index < this.length, "Attempted to index out of bounds!");
        unsafe {
            let _b: Any = this.elements;
            let _m: &Stmt = &*_b;
            return _m + this.elemSize * index;
        }
    }
    func getField(&this, index: usize) -> &Field {
        assert_with_msg(this.kind == VECTOR_KIND_FIELD(), "Attempted to get Field of a non-Field Vector.");
        assert_with_msg(index < this.length, "Attempted to index out of bounds!");
        unsafe {
            let _b: Any = this.elements;
            let _m: &Field = &*_b;
            return _m + this.elemSize * index;
        }
    }
    func getPairTokenExpr(&this, index: usize) -> &PairTokenExpr {
        assert_with_msg(this.kind == VECTOR_KIND_PAIR_STRING_EXPR(), "Attempted to get PairTokenExpr of a non-PairTokenExpr Vector.");
        assert_with_msg(index < this.length, "Attempted to index out of bounds!");
        unsafe {
            let _b: Any = this.elements;
            let _p: &PairTokenExpr = &*_b;
            return _p + this.elemSize * index;
        }
    }
    func getType(&this, index: usize) -> &Type {
        assert_with_msg(this.kind == VECTOR_KIND_TYPE(), "Attempted to get Type of a non-Type Vector.");
        assert_with_msg(index < this.length, "Attempted to index out of bounds!");
        unsafe {
            let _b: Any = this.elements;
            let _m: &Type = &*_b;
            return _m + this.elemSize * index;
        }
    }
    func getTypeDef(&this, index: usize) -> &TypeDef {
        assert_with_msg(this.kind == VECTOR_KIND_TYPE_DEF(), "Attempted to get TypeDef of a non-TypeDef Vector.");
        assert_with_msg(index < this.length, "Attempted to index out of bounds!");
        unsafe {
            let _b: Any = this.elements;
            let _m: &TypeDef = &*_b;
            return _m + this.elemSize * index;
        }
    }
}

func emptyVec(kind: usize, elemSize: usize) -> Vec {
    unsafe {
        let bfr: Any = NULL();
        return Vec {
            elements: bfr,
            elemSize: elemSize,
            kind: kind,
            length: 0,
            capacity: 0,
        };
    }
}
func newVec(kind: usize, cap: usize, elemSize: usize) -> Vec {
    unsafe {
        let bfr: Any = calloc(cap, elemSize);
        return Vec {
            elements: bfr,
            elemSize: elemSize,
            kind: kind,
            length: 0,
            capacity: cap,
        };
    }
}