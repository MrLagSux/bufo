import "frontend/nodes.bufo";

comptime OPTION_KIND_TYPE: usize = 0;
struct Option {
    kind: usize;
    initialized: bool;
    data: Any;
    func isSome(&this) -> bool {
        return this.initialized;
    }
    func asType(&this) -> &Type {
        assert_with_msg(this.initialized, "Attempted to access data of uninitialized Option");
        unsafe {
            assert_with_msg(this.data != null, "Option.asType: Underlying data is Null!");
            return this.data;
        }
    }
}
func newOptionNone() -> Option {
    unsafe {
        return Option {
            kind: 0-1,
            initialized: false,
            data: null 
        };
    }
}
func newOptionType(typ: &Type) -> Option {
    unsafe {
        let _m: Any = calloc(sizeof Type, 1);
        assert_with_msg(_m != null, "Could not allocate memory for Option");
        let _q: &mut Type = &mut *_m;
        *_q = *typ;
        return Option {
            kind: OPTION_KIND_TYPE,
            initialized: true,
            data: _m
        };
    }
}
