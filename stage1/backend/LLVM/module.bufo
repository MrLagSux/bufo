

struct LLVMModule {
    ref: LLVMModuleRef;

    func print(&this) {
        let s: &char = LLVMPrintModuleToString(this.ref);
        unsafe {
            printf("%s\n", s);
        }
    }

    func addFunction(&mut this, name: SubStr, function: LLVMType) -> LLVMValue {
        trace("LLVMModule.addFunction");
        unsafe {
            let _n: String = name.toString();
            let f: LLVMValueRef = LLVMAddFunction(this.ref, _n.chars(), function.ref);
            _n.drop();
            assert_with_msg(!f.isNull(), "Could not add function to module");
            return newLLVMValueFromRef(f);
        }
    }
    func getFunction(&mut this, name: SubStr) -> LLVMValue {
        trace("LLVMModule.getFunction");
        unsafe {
            let _n: String = name.toString();
            let f: LLVMValueRef = LLVMGetNamedFunction(this.ref, _n.chars());
            _n.drop();
            assert_with_msg(!f.isNull(), "Could not get function from module");
            return newLLVMValueFromRef(f);
        }
    }
}

unsafe func newLLVMModuleFromRef(ref: LLVMModuleRef) -> LLVMModule {
    trace("newLLVMModuleFromRef");
    assert_with_msg(!ref.isNull(), "Passed invalid reference to newLLVMModuleFromRef");
    return LLVMModule {
        ref: ref
    };
}
