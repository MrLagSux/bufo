import vectors;

struct String {
    // FIXME: Type mismatch! Expected type `string::VecChar`, found type `vectors::VecChar`.
    // We *have to* write `vectors::` here. Otherwise the Typechecker gets confused.
    // Too lazy to fix right now, but I think `unwrap_type_node_typ` is the problem.
    content: vectors::VecChar;

    func new() -> String {
        return String {
            content: vectors::VecChar::with_capacity(8)
        };
    }

    func push_str(&mut this, string: &str) {
        unsafe {
            let len: usize = strlen(string);
            let _a: Any = string;
            let str_as_char: &char = _a;
            for (mut i: usize = 0; i < len; i = i + 1) {
                this.push_char(*(str_as_char + i));
            }
        }
    }

    func push_char(&mut this, ch: char) {
        this.content.push(ch);
    }

    func as_char_ptr(&this) -> &char {
        unsafe {
            let _a: Any = this.content.buffer;
            let _b: &char = _a;
            return _b;
        }
    }
}
