import "substr.bufo";
import "string.bufo";
import "frontend/nodes.bufo";
import "frontend/lexer.bufo";
import "frontend/parser.bufo";
import "middleend/type_checker.bufo";

unsafe func main() {
    let argv: &&char = GLOBAL_GET_ARGV();
    let argc: usize = GLOBAL_GET_ARGC();
    if (argc < 2) unsafe {
        let stderr: Any = fdopen(2, "w");
        fprintf(stderr, "error: Expected input file as argument.\n");
        exit(1);
    }
    let _prog: &char = getArg(0);
    let file: &char = getArg(1);
    let fileSubStr: SubStr = newSubStr(file, 0, strlen(file));
    let string: String = readFileToString(file);
    let sub: SubStr = newSubStrOfString(&string, 0, string.length);
    mut lexer: Lexer = newLexer(&sub);
    if (false) {
        while (true) {
            let tkn: Token = lexer.next();
            if (tkn.kind == TOKEN_EOF) break;
            tkn.print();
            unsafe { printf("\n"); }
        }
    } else unsafe {
        mut parser: Parser = newParser(&mut lexer);
        mut module: ParsedModule = parser.parseModule(&fileSubStr);
        mut checker: TypeChecker = newTypeChecker();
        mut checkedModule: CheckedModule = checker.checkModule(&module);
    }
    string.drop();
}
