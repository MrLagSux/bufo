// All libc functions are unsafe, because C-compliance is not guaranteed yet.

// TODO: Implement safe wrapper for everything :^)

// Strings
unsafe extern strlen(string: &char) -> usize;
unsafe extern strcmp(s1: &char, s2: &char) -> i32;

// Memory
unsafe extern malloc(bytes: usize) -> Any;
unsafe extern calloc(num: usize, size: usize) -> Any;
unsafe extern realloc(ptr: Any, new_size: usize) -> Any;
unsafe extern free(ptr: Any);
unsafe extern memcpy(dest: Any, src: Any, count: usize) -> Any;

// File IO
unsafe extern fopen(filename: &char, mode: &char) -> Any;
// FIXME: Any ignores Mutability :^) We should probably only write to mutable buffers tho...
unsafe extern fread(buffer: Any, size: usize, count: usize, stream: Any) -> usize;
unsafe extern fclose(stream: Any) -> i32;
unsafe extern fprintf(stream: Any, msg: &char, ...);

unsafe extern snprintf(buffer: Any, size: usize, format: &char, ...) -> usize;

// Console IO
unsafe extern printf(msg: &char, ...) -> usize;
unsafe extern fdopen(fd: i32, mode: &char) -> Any;
unsafe extern putchar(ch: char) -> char;
unsafe extern puts(s: &char) -> usize;

unsafe extern exit(code: i32);
