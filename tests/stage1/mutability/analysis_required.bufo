//! THIS IS A TEST PROGRAM
//! STAGE: 1
//! RUNTIME
//! FAILURE
//! CODE: 1
//! ERROR:
// idk man, but this requires deep analysis to figure out and report :(
// Line 35 also modifies `f`, which is not allowed to happen
// There's a 100% chance that this is something which we can statically verify
// But I'm too lazy to figure it out right now :^)

// Update 24_03_06: Change to RUNTIME, and set expected error to "" (note the `//` instead of `//!`)
//                  This allows the test to succeed for now in the test suite
// TODO: This has only been a problem in the context of classes and references
//       With stuff being structs now, and initialization being reworked, it's
//       less of an issue. However, with Ownership coming soon, it might still
//       be worth keeping the example for now.
// NOTE: The test is now modified to use the current reference semantics. (2024_02_22)
//       However, expected behavior should be a checker error, because `b.foo.field` modifies `f`
//       which is not marked as mutable.
//       As of right now, this test is allowed to fail :^)

struct Foo {
    field: i32;
}

struct Bar {
    foo: &Foo;
}

func main() -> u32 {
    let f: Foo = Foo {
        field: 0,
    };
    mut b: Bar = Bar {
        foo: &f,
    };
    b.foo.field = 10;
    if (f.field == 10) return 1;
    if (f.field != 0) return 2;
    return 0;
}