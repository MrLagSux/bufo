//! THIS IS A TEST PROGRAM
//! COMPILER
//! FAILURE
//! CODE: 1
//! ERROR:
//! idk man, but this requires deep analysis to figure out and report :(
//! Line 24 also modifies `f`, which is not allowed to happen
//! There's a 100% chance that this is something which we can statically verify
//! But I'm too lazy to figure it out right now :^)

// TODO: This has only been a problem in the context of classes and references
//       With stuff being structs now, and initialization being reworked, it's
//       less of an issue. However, with Ownership coming soon, it might still
//       be worth keeping the example for now.

struct Bar {
    foo: Foo;
}

struct Foo {
    field: i32;
}

func main() -> u32 {
    let f: Foo = Foo {
        field: 0,
    };
    mut b: Bar = Bar {
        foo: f,
    };
    b.foo.field = 10;
    if (f.field == 10) return 1;
    return 0;
}