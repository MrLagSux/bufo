//! THIS IS A TEST PROGRAM
//! STAGE: 2
//! COMPILER
//! SUCCESS

const false = @boolean()(0);
const u32 = @integer(32, false);
const u16 = @integer(16, false);
const none = @none();

const usize = u32;

const main = func () {
    const f1 = func (u: u32) -> u32 { return 0; };
    const f2 = func (u: usize) -> usize { return 0; };
    const f3 = func (u: u16) -> u16 { return 0; };
    @assert(@typeof(f1) == @typeof(f2));
    @assert(@typeof(f1) != @typeof(f3));
    @assert(@typeof(f2) != @typeof(f3));

    let a = u32(5);
    // @typeof(a) == u32
    // -> @typeof(factorial) = func (u32) -> u32
    let factorial = func (n: @typeof(a)) -> @typeof(a) {
        return if n == 1 1 else n * factorial(n - 1);
    };
    @assert(@typeof(factorial) == @typeof(f1));

    const b = u16(5);
    // @typeof(a) == u16
    // -> @typeof(factorial) = func (u16) -> u16
    let other = func (n: @typeof(b)) -> @typeof(b) {
        return if n == 1 1 else n * other(n - 1);
    };
    @assert(@typeof(other) == @typeof(f3));
    @assert(@typeof(other) != @typeof(factorial));
};

@entry(main);
