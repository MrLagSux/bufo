//! THIS IS A TEST PROGRAM
//! STAGE: 2
//! COMPILER
//! SUCCESS

const type = @anytype();
const true = 1 == 1;
const false = 0 == 1;
const i32 = @integer(32, true);
const u32 = @integer(32, false);
const u64 = @integer(64, false);
const usize = u64;

const ArrayList = func (elem: type) -> type {
    return struct {
        elements: &elem;
        capacity: usize;
        length: usize;
    };
};

const ListI32 = ArrayList(i32);
const ListU64 = ArrayList(u64);
@assert(ListI32 != ListU64);

const ListListI32 = ArrayList(ArrayList(i32));
const ListListU64 = ArrayList(ArrayList(u64));
@assert(ListListI32 != ListListU64);

// Every time you call ArrayList(), you get a unique Type
@assert(ListListI32 != ArrayList(ListI32));
@assert(ListListU64 != ArrayList(ListU64));
@assert(ArrayList(u32) != ArrayList(u32));
