//! THIS IS A TEST PROGRAM
//! STAGE: 2
//! COMPILER
//! SUCCESS

const true = 1 == 1;
const i32 = @integer(32, true);

const Vector = struct {
    x: i32;
    y: i32;
};

const zero = Vector(i32(0), i32(0));

const Point = Vector;
const Rect = struct {
    topLeft: Point;
    topRight: Point;
    bottomLeft: Point;
    bottomRight: Point;
};

const Window = Rect;

const WIDTH = i32(800);
const HEIGHT = i32(600);
const window = Window(
    // Point == Vector, so we can use Vectors here
    // REVIEW: Do we want to keep it like that?
    // Or reverse: Every Point is a Vector (can use Point anywhere Vector is used)
    //             but not every Vector is a Point (can not use Vector when Point is required)
    zero,
    Point(WIDTH, i32(0)),
    Point(i32(0), HEIGHT),
    Point(WIDTH, HEIGHT),
);

const Frame = struct {
    w: Window;
};

const f = Frame(window);
const w1 = window;
const w2 = window;
@assert(f == Frame(w1));
@assert(f == Frame(w2));
@assert(Frame(w1) == Frame(w2));


