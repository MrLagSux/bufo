$Auto-generated by Bufo's bindgen$

compiler_flags {
    libpath: "./raylib/lib/raylib/lib";
    library: "raylib";
    library: "OpenGL32";
    library: "msvcrt";
    library: "Gdi32";
    library: "WinMM";
    library: "kernel32";
    library: "shell32";
    library: "User32";
    linker: "/NODEFAULTLIB:libcmt";
}


struct Vector2 {
    x: f32;
    y: f32;
}
struct Vector3 {
    x: f32;
    y: f32;
    z: f32;
}
struct Vector4 {
    x: f32;
    y: f32;
    z: f32;
    w: f32;
}

struct Matrix {
    m0: f32;
    m4: f32;
    m8: f32;
    m12: f32;
    m1: f32;
    m5: f32;
    m9: f32;
    m13: f32;
    m2: f32;
    m6: f32;
    m10: f32;
    m14: f32;
    m3: f32;
    m7: f32;
    m11: f32;
    m15: f32;
}
struct Color {
    r: u8;
    g: u8;
    b: u8;
    a: u8;
}
struct Rectangle {
    x: f32;
    y: f32;
    width: f32;
    height: f32;
}
struct Image {
    data: Any;
    width: i32;
    height: i32;
    mipmaps: i32;
    format: i32;
}
struct Texture {
    id: u32;
    width: i32;
    height: i32;
    mipmaps: i32;
    format: i32;
}


struct RenderTexture {
    id: u32;
    texture: Texture;
    depth: Texture;
}

struct NPatchInfo {
    source: Rectangle;
    left: i32;
    top: i32;
    right: i32;
    bottom: i32;
    layout: i32;
}
struct GlyphInfo {
    value: i32;
    offsetX: i32;
    offsetY: i32;
    advanceX: i32;
    image: Image;
}
struct Font {
    baseSize: i32;
    glyphCount: i32;
    glyphPadding: i32;
    texture: Texture;
    recs: &Rectangle;
    glyphs: &GlyphInfo;
}
struct Camera3D {
    position: Vector3;
    target: Vector3;
    up: Vector3;
    fovy: f32;
    projection: i32;
}

struct Camera2D {
    offset: Vector2;
    target: Vector2;
    rotation: f32;
    zoom: f32;
}
struct Mesh {
    vertexCount: i32;
    triangleCount: i32;
    vertices: &f32;
    texcoords: &f32;
    texcoords2: &f32;
    normals: &f32;
    tangents: &f32;
    colors: &u8;
    indices: &u16;
    animVertices: &f32;
    animNormals: &f32;
    boneIds: &u8;
    boneWeights: &f32;
    vaoId: u32;
    vboId: &u32;
}
struct Shader {
    id: u32;
    locs: &i32;
}
struct MaterialMap {
    texture: Texture;
    color: Color;
    value: f32;
}
struct Material {
    shader: Shader;
    maps: &MaterialMap;
    params: [f32; 4];
}
struct Transform {
    translation: Vector3;
    rotation: Vector4;
    scale: Vector3;
}
struct BoneInfo {
    name: [char; 32];
    parent: i32;
}
struct Model {
    transform: Matrix;
    meshCount: i32;
    materialCount: i32;
    meshes: &Mesh;
    materials: &Material;
    meshMaterial: &i32;
    boneCount: i32;
    bones: &BoneInfo;
    bindPose: &Transform;
}
struct ModelAnimation {
    boneCount: i32;
    frameCount: i32;
    bones: &BoneInfo;
    framePoses: &&Transform;
    name: [char; 32];
}
struct Ray {
    position: Vector3;
    direction: Vector3;
}
struct RayCollision {
    hit: bool;
    distance: f32;
    point: Vector3;
    normal: Vector3;
}
struct BoundingBox {
    min: Vector3;
    max: Vector3;
}
struct Wave {
    frameCount: u32;
    sampleRate: u32;
    sampleSize: u32;
    channels: u32;
    data: Any;
}
struct rAudioBuffer {
}
struct rAudioProcessor {
}
struct AudioStream {
    buffer: &rAudioBuffer;
    processor: &rAudioProcessor;
    sampleRate: u32;
    sampleSize: u32;
    channels: u32;
}
struct Sound {
    stream: AudioStream;
    frameCount: u32;
}
struct Music {
    stream: AudioStream;
    frameCount: u32;
    looping: bool;
    ctxType: i32;
    ctxData: Any;
}
struct VrDeviceInfo {
    hResolution: i32;
    vResolution: i32;
    hScreenSize: f32;
    vScreenSize: f32;
    vScreenCenter: f32;
    eyeToScreenDistance: f32;
    lensSeparationDistance: f32;
    interpupillaryDistance: f32;
    lensDistortionValues: [f32; 4];
    chromaAbCorrection: [f32; 4];
}
struct VrStereoConfig {
    projection: [Matrix; 2];
    viewOffset: [Matrix; 2];
    leftLensCenter: [f32; 2];
    rightLensCenter: [f32; 2];
    leftScreenCenter: [f32; 2];
    rightScreenCenter: [f32; 2];
    scale: [f32; 2];
    scaleIn: [f32; 2];
}
struct FilePathList {
    capacity: u32;
    count: u32;
    paths: &&str;
}
struct AutomationEvent {
    frame: u32;
    typ: u32;
    params: [i32; 4];
}
struct AutomationEventList {
    capacity: u32;
    count: u32;
    events: &AutomationEvent;
}
$TODO: Codegen Enum $ struct ConfigFlags {}
$TODO: Codegen Enum $ struct TraceLogLevel {}
$TODO: Codegen Enum $ struct KeyboardKey {}
$TODO: Codegen Enum $ struct MouseButton {}
$TODO: Codegen Enum $ struct MouseCursor {}
$TODO: Codegen Enum $ struct GamepadButton {}
$TODO: Codegen Enum $ struct GamepadAxis {}
$TODO: Codegen Enum $ struct MaterialMapIndex {}
$TODO: Codegen Enum $ struct ShaderLocationIndex {}
$TODO: Codegen Enum $ struct ShaderUniformDataType {}
$TODO: Codegen Enum $ struct ShaderAttributeDataType {}
$TODO: Codegen Enum $ struct PixelFormat {}
$TODO: Codegen Enum $ struct TextureFilter {}
$TODO: Codegen Enum $ struct TextureWrap {}
$TODO: Codegen Enum $ struct CubemapLayout {}
$TODO: Codegen Enum $ struct FontType {}
$TODO: Codegen Enum $ struct BlendMode {}
$TODO: Codegen Enum $ struct Gesture {}
$TODO: Codegen Enum $ struct CameraMode {}
$TODO: Codegen Enum $ struct CameraProjection {}
$TODO: Codegen Enum $ struct NPatchLayout {}
$TODO: Codegen FuncPtr $ struct TraceLogCallback {}
$TODO: Codegen FuncPtr $ struct LoadFileDataCallback {}
$TODO: Codegen FuncPtr $ struct SaveFileDataCallback {}
$TODO: Codegen FuncPtr $ struct LoadFileTextCallback {}
$TODO: Codegen FuncPtr $ struct SaveFileTextCallback {}
unsafe extern InitWindow(width: i32, height: i32, title: &str);
unsafe extern CloseWindow();
unsafe extern WindowShouldClose() -> bool;
unsafe extern IsWindowReady() -> bool;
unsafe extern IsWindowFullscreen() -> bool;
unsafe extern IsWindowHidden() -> bool;
unsafe extern IsWindowMinimized() -> bool;
unsafe extern IsWindowMaximized() -> bool;
unsafe extern IsWindowFocused() -> bool;
unsafe extern IsWindowResized() -> bool;
unsafe extern IsWindowState(flag: u32) -> bool;
unsafe extern SetWindowState(flags: u32);
unsafe extern ClearWindowState(flags: u32);
unsafe extern ToggleFullscreen();
unsafe extern ToggleBorderlessWindowed();
unsafe extern MaximizeWindow();
unsafe extern MinimizeWindow();
unsafe extern RestoreWindow();
unsafe extern SetWindowIcon(image: Image);
unsafe extern SetWindowIcons(images: &Image, count: i32);
unsafe extern SetWindowTitle(title: &str);
unsafe extern SetWindowPosition(x: i32, y: i32);
unsafe extern SetWindowMonitor(monitor: i32);
unsafe extern SetWindowMinSize(width: i32, height: i32);
unsafe extern SetWindowMaxSize(width: i32, height: i32);
unsafe extern SetWindowSize(width: i32, height: i32);
unsafe extern SetWindowOpacity(opacity: f32);
unsafe extern SetWindowFocused();
unsafe extern GetWindowHandle() -> Any;
unsafe extern GetScreenWidth() -> i32;
unsafe extern GetScreenHeight() -> i32;
unsafe extern GetRenderWidth() -> i32;
unsafe extern GetRenderHeight() -> i32;
unsafe extern GetMonitorCount() -> i32;
unsafe extern GetCurrentMonitor() -> i32;
unsafe extern GetMonitorPosition(monitor: i32) -> Vector2;
unsafe extern GetMonitorWidth(monitor: i32) -> i32;
unsafe extern GetMonitorHeight(monitor: i32) -> i32;
unsafe extern GetMonitorPhysicalWidth(monitor: i32) -> i32;
unsafe extern GetMonitorPhysicalHeight(monitor: i32) -> i32;
unsafe extern GetMonitorRefreshRate(monitor: i32) -> i32;
unsafe extern GetWindowPosition() -> Vector2;
unsafe extern GetWindowScaleDPI() -> Vector2;
unsafe extern GetMonitorName(monitor: i32) -> &str;
unsafe extern SetClipboardText(text: &str);
unsafe extern GetClipboardText() -> &str;
unsafe extern EnableEventWaiting();
unsafe extern DisableEventWaiting();
unsafe extern ShowCursor();
unsafe extern HideCursor();
unsafe extern IsCursorHidden() -> bool;
unsafe extern EnableCursor();
unsafe extern DisableCursor();
unsafe extern IsCursorOnScreen() -> bool;
unsafe extern ClearBackground(color: Color);
unsafe extern BeginDrawing();
unsafe extern EndDrawing();
unsafe extern BeginMode2D(camera: Camera2D);
unsafe extern EndMode2D();
unsafe extern BeginMode3D(camera: Camera3D);
unsafe extern EndMode3D();
unsafe extern BeginTextureMode(target: RenderTexture);
unsafe extern EndTextureMode();
unsafe extern BeginShaderMode(shader: Shader);
unsafe extern EndShaderMode();
unsafe extern BeginBlendMode(mode: i32);
unsafe extern EndBlendMode();
unsafe extern BeginScissorMode(x: i32, y: i32, width: i32, height: i32);
unsafe extern EndScissorMode();
unsafe extern BeginVrStereoMode(config: VrStereoConfig);
unsafe extern EndVrStereoMode();
unsafe extern LoadVrStereoConfig(device: VrDeviceInfo) -> VrStereoConfig;
unsafe extern UnloadVrStereoConfig(config: VrStereoConfig);
unsafe extern LoadShader(vsFileName: &str, fsFileName: &str) -> Shader;
unsafe extern LoadShaderFromMemory(vsCode: &str, fsCode: &str) -> Shader;
unsafe extern IsShaderReady(shader: Shader) -> bool;
unsafe extern GetShaderLocation(shader: Shader, uniformName: &str) -> i32;
unsafe extern GetShaderLocationAttrib(shader: Shader, attribName: &str) -> i32;
unsafe extern SetShaderValue(shader: Shader, locIndex: i32, value: Any, uniformType: i32);
unsafe extern SetShaderValueV(shader: Shader, locIndex: i32, value: Any, uniformType: i32, count: i32);
unsafe extern SetShaderValueMatrix(shader: Shader, locIndex: i32, mat: Matrix);
unsafe extern SetShaderValueTexture(shader: Shader, locIndex: i32, texture: Texture);
unsafe extern UnloadShader(shader: Shader);
unsafe extern GetMouseRay(mousePosition: Vector2, camera: Camera3D) -> Ray;
unsafe extern GetCameraMatrix(camera: Camera3D) -> Matrix;
unsafe extern GetCameraMatrix2D(camera: Camera2D) -> Matrix;
unsafe extern GetWorldToScreen(position: Vector3, camera: Camera3D) -> Vector2;
unsafe extern GetScreenToWorld2D(position: Vector2, camera: Camera2D) -> Vector2;
unsafe extern GetWorldToScreenEx(position: Vector3, camera: Camera3D, width: i32, height: i32) -> Vector2;
unsafe extern GetWorldToScreen2D(position: Vector2, camera: Camera2D) -> Vector2;
unsafe extern SetTargetFPS(fps: i32);
unsafe extern GetFrameTime() -> f32;
unsafe extern GetTime() -> f64;
unsafe extern GetFPS() -> i32;
unsafe extern SwapScreenBuffer();
unsafe extern PollInputEvents();
unsafe extern WaitTime(seconds: f64);
unsafe extern SetRandomSeed(seed: u32);
unsafe extern GetRandomValue(min: i32, max: i32) -> i32;
unsafe extern LoadRandomSequence(count: u32, min: i32, max: i32) -> &i32;
unsafe extern UnloadRandomSequence(sequence: &i32);
unsafe extern TakeScreenshot(fileName: &str);
unsafe extern SetConfigFlags(flags: u32);
unsafe extern OpenURL(url: &str);
unsafe extern TraceLog(logLevel: i32, text: &str, ...);
unsafe extern SetTraceLogLevel(logLevel: i32);
unsafe extern MemAlloc(size: u32) -> Any;
unsafe extern MemRealloc(ptr: Any, size: u32) -> Any;
unsafe extern MemFree(ptr: Any);
unsafe extern SetTraceLogCallback(callback: TraceLogCallback);
unsafe extern SetLoadFileDataCallback(callback: LoadFileDataCallback);
unsafe extern SetSaveFileDataCallback(callback: SaveFileDataCallback);
unsafe extern SetLoadFileTextCallback(callback: LoadFileTextCallback);
unsafe extern SetSaveFileTextCallback(callback: SaveFileTextCallback);
unsafe extern LoadFileData(fileName: &str, dataSize: &i32) -> &u8;
unsafe extern UnloadFileData(data: &u8);
unsafe extern SaveFileData(fileName: &str, data: Any, dataSize: i32) -> bool;
unsafe extern ExportDataAsCode(data: &u8, dataSize: i32, fileName: &str) -> bool;
unsafe extern LoadFileText(fileName: &str) -> &str;
unsafe extern UnloadFileText(text: &str);
unsafe extern SaveFileText(fileName: &str, text: &str) -> bool;
unsafe extern FileExists(fileName: &str) -> bool;
unsafe extern DirectoryExists(dirPath: &str) -> bool;
unsafe extern IsFileExtension(fileName: &str, ext: &str) -> bool;
unsafe extern GetFileLength(fileName: &str) -> i32;
unsafe extern GetFileExtension(fileName: &str) -> &str;
unsafe extern GetFileName(filePath: &str) -> &str;
unsafe extern GetFileNameWithoutExt(filePath: &str) -> &str;
unsafe extern GetDirectoryPath(filePath: &str) -> &str;
unsafe extern GetPrevDirectoryPath(dirPath: &str) -> &str;
unsafe extern GetWorkingDirectory() -> &str;
unsafe extern GetApplicationDirectory() -> &str;
unsafe extern ChangeDirectory(dir: &str) -> bool;
unsafe extern IsPathFile(path: &str) -> bool;
unsafe extern LoadDirectoryFiles(dirPath: &str) -> FilePathList;
unsafe extern LoadDirectoryFilesEx(basePath: &str, filter: &str, scanSubdirs: bool) -> FilePathList;
unsafe extern UnloadDirectoryFiles(files: FilePathList);
unsafe extern IsFileDropped() -> bool;
unsafe extern LoadDroppedFiles() -> FilePathList;
unsafe extern UnloadDroppedFiles(files: FilePathList);
unsafe extern GetFileModTime(fileName: &str) -> i64;
unsafe extern CompressData(data: &u8, dataSize: i32, compDataSize: &i32) -> &u8;
unsafe extern DecompressData(compData: &u8, compDataSize: i32, dataSize: &i32) -> &u8;
unsafe extern EncodeDataBase64(data: &u8, dataSize: i32, outputSize: &i32) -> &str;
unsafe extern DecodeDataBase64(data: &u8, outputSize: &i32) -> &u8;
unsafe extern LoadAutomationEventList(fileName: &str) -> AutomationEventList;
unsafe extern UnloadAutomationEventList(list: &AutomationEventList);
unsafe extern ExportAutomationEventList(list: AutomationEventList, fileName: &str) -> bool;
unsafe extern SetAutomationEventList(list: &AutomationEventList);
unsafe extern SetAutomationEventBaseFrame(frame: i32);
unsafe extern StartAutomationEventRecording();
unsafe extern StopAutomationEventRecording();
unsafe extern PlayAutomationEvent(event: AutomationEvent);
unsafe extern IsKeyPressed(key: i32) -> bool;
unsafe extern IsKeyPressedRepeat(key: i32) -> bool;
unsafe extern IsKeyDown(key: i32) -> bool;
unsafe extern IsKeyReleased(key: i32) -> bool;
unsafe extern IsKeyUp(key: i32) -> bool;
unsafe extern GetKeyPressed() -> i32;
unsafe extern GetCharPressed() -> i32;
unsafe extern SetExitKey(key: i32);
unsafe extern IsGamepadAvailable(gamepad: i32) -> bool;
unsafe extern GetGamepadName(gamepad: i32) -> &str;
unsafe extern IsGamepadButtonPressed(gamepad: i32, button: i32) -> bool;
unsafe extern IsGamepadButtonDown(gamepad: i32, button: i32) -> bool;
unsafe extern IsGamepadButtonReleased(gamepad: i32, button: i32) -> bool;
unsafe extern IsGamepadButtonUp(gamepad: i32, button: i32) -> bool;
unsafe extern GetGamepadButtonPressed() -> i32;
unsafe extern GetGamepadAxisCount(gamepad: i32) -> i32;
unsafe extern GetGamepadAxisMovement(gamepad: i32, axis: i32) -> f32;
unsafe extern SetGamepadMappings(mappings: &str) -> i32;
unsafe extern IsMouseButtonPressed(button: i32) -> bool;
unsafe extern IsMouseButtonDown(button: i32) -> bool;
unsafe extern IsMouseButtonReleased(button: i32) -> bool;
unsafe extern IsMouseButtonUp(button: i32) -> bool;
unsafe extern GetMouseX() -> i32;
unsafe extern GetMouseY() -> i32;
unsafe extern GetMousePosition() -> Vector2;
unsafe extern GetMouseDelta() -> Vector2;
unsafe extern SetMousePosition(x: i32, y: i32);
unsafe extern SetMouseOffset(offsetX: i32, offsetY: i32);
unsafe extern SetMouseScale(scaleX: f32, scaleY: f32);
unsafe extern GetMouseWheelMove() -> f32;
unsafe extern GetMouseWheelMoveV() -> Vector2;
unsafe extern SetMouseCursor(cursor: i32);
unsafe extern GetTouchX() -> i32;
unsafe extern GetTouchY() -> i32;
unsafe extern GetTouchPosition(index: i32) -> Vector2;
unsafe extern GetTouchPointId(index: i32) -> i32;
unsafe extern GetTouchPointCount() -> i32;
unsafe extern SetGesturesEnabled(flags: u32);
unsafe extern IsGestureDetected(gesture: u32) -> bool;
unsafe extern GetGestureDetected() -> i32;
unsafe extern GetGestureHoldDuration() -> f32;
unsafe extern GetGestureDragVector() -> Vector2;
unsafe extern GetGestureDragAngle() -> f32;
unsafe extern GetGesturePinchVector() -> Vector2;
unsafe extern GetGesturePinchAngle() -> f32;
unsafe extern UpdateCamera(camera: &Camera3D, mode: i32);
unsafe extern UpdateCameraPro(camera: &Camera3D, movement: Vector3, rotation: Vector3, zoom: f32);
unsafe extern SetShapesTexture(texture: Texture, source: Rectangle);
unsafe extern DrawPixel(posX: i32, posY: i32, color: Color);
unsafe extern DrawPixelV(position: Vector2, color: Color);
unsafe extern DrawLine(startPosX: i32, startPosY: i32, endPosX: i32, endPosY: i32, color: Color);
unsafe extern DrawLineV(startPos: Vector2, endPos: Vector2, color: Color);
unsafe extern DrawLineEx(startPos: Vector2, endPos: Vector2, thick: f32, color: Color);
unsafe extern DrawLineStrip(points: &Vector2, pointCount: i32, color: Color);
unsafe extern DrawLineBezier(startPos: Vector2, endPos: Vector2, thick: f32, color: Color);
unsafe extern DrawCircle(centerX: i32, centerY: i32, radius: f32, color: Color);
unsafe extern DrawCircleSector(center: Vector2, radius: f32, startAngle: f32, endAngle: f32, segments: i32, color: Color);
unsafe extern DrawCircleSectorLines(center: Vector2, radius: f32, startAngle: f32, endAngle: f32, segments: i32, color: Color);
unsafe extern DrawCircleGradient(centerX: i32, centerY: i32, radius: f32, color1: Color, color2: Color);
unsafe extern DrawCircleV(center: Vector2, radius: f32, color: Color);
unsafe extern DrawCircleLines(centerX: i32, centerY: i32, radius: f32, color: Color);
unsafe extern DrawCircleLinesV(center: Vector2, radius: f32, color: Color);
unsafe extern DrawEllipse(centerX: i32, centerY: i32, radiusH: f32, radiusV: f32, color: Color);
unsafe extern DrawEllipseLines(centerX: i32, centerY: i32, radiusH: f32, radiusV: f32, color: Color);
unsafe extern DrawRing(center: Vector2, innerRadius: f32, outerRadius: f32, startAngle: f32, endAngle: f32, segments: i32, color: Color);
unsafe extern DrawRingLines(center: Vector2, innerRadius: f32, outerRadius: f32, startAngle: f32, endAngle: f32, segments: i32, color: Color);
unsafe extern DrawRectangle(posX: i32, posY: i32, width: i32, height: i32, color: Color);
unsafe extern DrawRectangleV(position: Vector2, size: Vector2, color: Color);
unsafe extern DrawRectangleRec(rec: Rectangle, color: Color);
unsafe extern DrawRectanglePro(rec: Rectangle, origin: Vector2, rotation: f32, color: Color);
unsafe extern DrawRectangleGradientV(posX: i32, posY: i32, width: i32, height: i32, color1: Color, color2: Color);
unsafe extern DrawRectangleGradientH(posX: i32, posY: i32, width: i32, height: i32, color1: Color, color2: Color);
unsafe extern DrawRectangleGradientEx(rec: Rectangle, col1: Color, col2: Color, col3: Color, col4: Color);
unsafe extern DrawRectangleLines(posX: i32, posY: i32, width: i32, height: i32, color: Color);
unsafe extern DrawRectangleLinesEx(rec: Rectangle, lineThick: f32, color: Color);
unsafe extern DrawRectangleRounded(rec: Rectangle, roundness: f32, segments: i32, color: Color);
unsafe extern DrawRectangleRoundedLines(rec: Rectangle, roundness: f32, segments: i32, lineThick: f32, color: Color);
unsafe extern DrawTriangle(v1: Vector2, v2: Vector2, v3: Vector2, color: Color);
unsafe extern DrawTriangleLines(v1: Vector2, v2: Vector2, v3: Vector2, color: Color);
unsafe extern DrawTriangleFan(points: &Vector2, pointCount: i32, color: Color);
unsafe extern DrawTriangleStrip(points: &Vector2, pointCount: i32, color: Color);
unsafe extern DrawPoly(center: Vector2, sides: i32, radius: f32, rotation: f32, color: Color);
unsafe extern DrawPolyLines(center: Vector2, sides: i32, radius: f32, rotation: f32, color: Color);
unsafe extern DrawPolyLinesEx(center: Vector2, sides: i32, radius: f32, rotation: f32, lineThick: f32, color: Color);
unsafe extern DrawSplineLinear(points: &Vector2, pointCount: i32, thick: f32, color: Color);
unsafe extern DrawSplineBasis(points: &Vector2, pointCount: i32, thick: f32, color: Color);
unsafe extern DrawSplineCatmullRom(points: &Vector2, pointCount: i32, thick: f32, color: Color);
unsafe extern DrawSplineBezierQuadratic(points: &Vector2, pointCount: i32, thick: f32, color: Color);
unsafe extern DrawSplineBezierCubic(points: &Vector2, pointCount: i32, thick: f32, color: Color);
unsafe extern DrawSplineSegmentLinear(p1: Vector2, p2: Vector2, thick: f32, color: Color);
unsafe extern DrawSplineSegmentBasis(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, thick: f32, color: Color);
unsafe extern DrawSplineSegmentCatmullRom(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, thick: f32, color: Color);
unsafe extern DrawSplineSegmentBezierQuadratic(p1: Vector2, c2: Vector2, p3: Vector2, thick: f32, color: Color);
unsafe extern DrawSplineSegmentBezierCubic(p1: Vector2, c2: Vector2, c3: Vector2, p4: Vector2, thick: f32, color: Color);
unsafe extern GetSplinePointLinear(startPos: Vector2, endPos: Vector2, t: f32) -> Vector2;
unsafe extern GetSplinePointBasis(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, t: f32) -> Vector2;
unsafe extern GetSplinePointCatmullRom(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, t: f32) -> Vector2;
unsafe extern GetSplinePointBezierQuad(p1: Vector2, c2: Vector2, p3: Vector2, t: f32) -> Vector2;
unsafe extern GetSplinePointBezierCubic(p1: Vector2, c2: Vector2, c3: Vector2, p4: Vector2, t: f32) -> Vector2;
unsafe extern CheckCollisionRecs(rec1: Rectangle, rec2: Rectangle) -> bool;
unsafe extern CheckCollisionCircles(center1: Vector2, radius1: f32, center2: Vector2, radius2: f32) -> bool;
unsafe extern CheckCollisionCircleRec(center: Vector2, radius: f32, rec: Rectangle) -> bool;
unsafe extern CheckCollisionPointRec(point: Vector2, rec: Rectangle) -> bool;
unsafe extern CheckCollisionPointCircle(point: Vector2, center: Vector2, radius: f32) -> bool;
unsafe extern CheckCollisionPointTriangle(point: Vector2, p1: Vector2, p2: Vector2, p3: Vector2) -> bool;
unsafe extern CheckCollisionPointPoly(point: Vector2, points: &Vector2, pointCount: i32) -> bool;
unsafe extern CheckCollisionLines(startPos1: Vector2, endPos1: Vector2, startPos2: Vector2, endPos2: Vector2, collisionPoint: &Vector2) -> bool;
unsafe extern CheckCollisionPointLine(point: Vector2, p1: Vector2, p2: Vector2, threshold: i32) -> bool;
unsafe extern GetCollisionRec(rec1: Rectangle, rec2: Rectangle) -> Rectangle;
unsafe extern LoadImage(fileName: &str) -> Image;
unsafe extern LoadImageRaw(fileName: &str, width: i32, height: i32, format: i32, headerSize: i32) -> Image;
unsafe extern LoadImageSvg(fileNameOrString: &str, width: i32, height: i32) -> Image;
unsafe extern LoadImageAnim(fileName: &str, frames: &i32) -> Image;
unsafe extern LoadImageFromMemory(fileType: &str, fileData: &u8, dataSize: i32) -> Image;
unsafe extern LoadImageFromTexture(texture: Texture) -> Image;
unsafe extern LoadImageFromScreen() -> Image;
unsafe extern IsImageReady(image: Image) -> bool;
unsafe extern UnloadImage(image: Image);
unsafe extern ExportImage(image: Image, fileName: &str) -> bool;
unsafe extern ExportImageToMemory(image: Image, fileType: &str, fileSize: &i32) -> &u8;
unsafe extern ExportImageAsCode(image: Image, fileName: &str) -> bool;
unsafe extern GenImageColor(width: i32, height: i32, color: Color) -> Image;
unsafe extern GenImageGradientLinear(width: i32, height: i32, direction: i32, start: Color, end: Color) -> Image;
unsafe extern GenImageGradientRadial(width: i32, height: i32, density: f32, inner: Color, outer: Color) -> Image;
unsafe extern GenImageGradientSquare(width: i32, height: i32, density: f32, inner: Color, outer: Color) -> Image;
unsafe extern GenImageChecked(width: i32, height: i32, checksX: i32, checksY: i32, col1: Color, col2: Color) -> Image;
unsafe extern GenImageWhiteNoise(width: i32, height: i32, factor: f32) -> Image;
unsafe extern GenImagePerlinNoise(width: i32, height: i32, offsetX: i32, offsetY: i32, scale: f32) -> Image;
unsafe extern GenImageCellular(width: i32, height: i32, tileSize: i32) -> Image;
unsafe extern GenImageText(width: i32, height: i32, text: &str) -> Image;
unsafe extern ImageCopy(image: Image) -> Image;
unsafe extern ImageFromImage(image: Image, rec: Rectangle) -> Image;
unsafe extern ImageText(text: &str, fontSize: i32, color: Color) -> Image;
unsafe extern ImageTextEx(font: Font, text: &str, fontSize: f32, spacing: f32, tint: Color) -> Image;
unsafe extern ImageFormat(image: &Image, newFormat: i32);
unsafe extern ImageToPOT(image: &Image, fill: Color);
unsafe extern ImageCrop(image: &Image, crop: Rectangle);
unsafe extern ImageAlphaCrop(image: &Image, threshold: f32);
unsafe extern ImageAlphaClear(image: &Image, color: Color, threshold: f32);
unsafe extern ImageAlphaMask(image: &Image, alphaMask: Image);
unsafe extern ImageAlphaPremultiply(image: &Image);
unsafe extern ImageBlurGaussian(image: &Image, blurSize: i32);
unsafe extern ImageResize(image: &Image, newWidth: i32, newHeight: i32);
unsafe extern ImageResizeNN(image: &Image, newWidth: i32, newHeight: i32);
unsafe extern ImageResizeCanvas(image: &Image, newWidth: i32, newHeight: i32, offsetX: i32, offsetY: i32, fill: Color);
unsafe extern ImageMipmaps(image: &Image);
unsafe extern ImageDither(image: &Image, rBpp: i32, gBpp: i32, bBpp: i32, aBpp: i32);
unsafe extern ImageFlipVertical(image: &Image);
unsafe extern ImageFlipHorizontal(image: &Image);
unsafe extern ImageRotate(image: &Image, degrees: i32);
unsafe extern ImageRotateCW(image: &Image);
unsafe extern ImageRotateCCW(image: &Image);
unsafe extern ImageColorTint(image: &Image, color: Color);
unsafe extern ImageColorInvert(image: &Image);
unsafe extern ImageColorGrayscale(image: &Image);
unsafe extern ImageColorContrast(image: &Image, contrast: f32);
unsafe extern ImageColorBrightness(image: &Image, brightness: i32);
unsafe extern ImageColorReplace(image: &Image, color: Color, replace: Color);
unsafe extern LoadImageColors(image: Image) -> &Color;
unsafe extern LoadImagePalette(image: Image, maxPaletteSize: i32, colorCount: &i32) -> &Color;
unsafe extern UnloadImageColors(colors: &Color);
unsafe extern UnloadImagePalette(colors: &Color);
unsafe extern GetImageAlphaBorder(image: Image, threshold: f32) -> Rectangle;
unsafe extern GetImageColor(image: Image, x: i32, y: i32) -> Color;
unsafe extern ImageClearBackground(dst: &Image, color: Color);
unsafe extern ImageDrawPixel(dst: &Image, posX: i32, posY: i32, color: Color);
unsafe extern ImageDrawPixelV(dst: &Image, position: Vector2, color: Color);
unsafe extern ImageDrawLine(dst: &Image, startPosX: i32, startPosY: i32, endPosX: i32, endPosY: i32, color: Color);
unsafe extern ImageDrawLineV(dst: &Image, start: Vector2, end: Vector2, color: Color);
unsafe extern ImageDrawCircle(dst: &Image, centerX: i32, centerY: i32, radius: i32, color: Color);
unsafe extern ImageDrawCircleV(dst: &Image, center: Vector2, radius: i32, color: Color);
unsafe extern ImageDrawCircleLines(dst: &Image, centerX: i32, centerY: i32, radius: i32, color: Color);
unsafe extern ImageDrawCircleLinesV(dst: &Image, center: Vector2, radius: i32, color: Color);
unsafe extern ImageDrawRectangle(dst: &Image, posX: i32, posY: i32, width: i32, height: i32, color: Color);
unsafe extern ImageDrawRectangleV(dst: &Image, position: Vector2, size: Vector2, color: Color);
unsafe extern ImageDrawRectangleRec(dst: &Image, rec: Rectangle, color: Color);
unsafe extern ImageDrawRectangleLines(dst: &Image, rec: Rectangle, thick: i32, color: Color);
unsafe extern ImageDraw(dst: &Image, src: Image, srcRec: Rectangle, dstRec: Rectangle, tint: Color);
unsafe extern ImageDrawText(dst: &Image, text: &str, posX: i32, posY: i32, fontSize: i32, color: Color);
unsafe extern ImageDrawTextEx(dst: &Image, font: Font, text: &str, position: Vector2, fontSize: f32, spacing: f32, tint: Color);
unsafe extern LoadTexture(fileName: &str) -> Texture;
unsafe extern LoadTextureFromImage(image: Image) -> Texture;
unsafe extern LoadTextureCubemap(image: Image, layout: i32) -> Texture;
unsafe extern LoadRenderTexture(width: i32, height: i32) -> RenderTexture;
unsafe extern IsTextureReady(texture: Texture) -> bool;
unsafe extern UnloadTexture(texture: Texture);
unsafe extern IsRenderTextureReady(target: RenderTexture) -> bool;
unsafe extern UnloadRenderTexture(target: RenderTexture);
unsafe extern UpdateTexture(texture: Texture, pixels: Any);
unsafe extern UpdateTextureRec(texture: Texture, rec: Rectangle, pixels: Any);
unsafe extern GenTextureMipmaps(texture: &Texture);
unsafe extern SetTextureFilter(texture: Texture, filter: i32);
unsafe extern SetTextureWrap(texture: Texture, wrap: i32);
unsafe extern DrawTexture(texture: Texture, posX: i32, posY: i32, tint: Color);
unsafe extern DrawTextureV(texture: Texture, position: Vector2, tint: Color);
unsafe extern DrawTextureEx(texture: Texture, position: Vector2, rotation: f32, scale: f32, tint: Color);
unsafe extern DrawTextureRec(texture: Texture, source: Rectangle, position: Vector2, tint: Color);
unsafe extern DrawTexturePro(texture: Texture, source: Rectangle, dest: Rectangle, origin: Vector2, rotation: f32, tint: Color);
unsafe extern DrawTextureNPatch(texture: Texture, nPatchInfo: NPatchInfo, dest: Rectangle, origin: Vector2, rotation: f32, tint: Color);
unsafe extern Fade(color: Color, alpha: f32) -> Color;
unsafe extern ColorToInt(color: Color) -> i32;
unsafe extern ColorNormalize(color: Color) -> Vector4;
unsafe extern ColorFromNormalized(normalized: Vector4) -> Color;
unsafe extern ColorToHSV(color: Color) -> Vector3;
unsafe extern ColorFromHSV(hue: f32, saturation: f32, value: f32) -> Color;
unsafe extern ColorTint(color: Color, tint: Color) -> Color;
unsafe extern ColorBrightness(color: Color, factor: f32) -> Color;
unsafe extern ColorContrast(color: Color, contrast: f32) -> Color;
unsafe extern ColorAlpha(color: Color, alpha: f32) -> Color;
unsafe extern ColorAlphaBlend(dst: Color, src: Color, tint: Color) -> Color;
unsafe extern GetColor(hexValue: u32) -> Color;
unsafe extern GetPixelColor(srcPtr: Any, format: i32) -> Color;
unsafe extern SetPixelColor(dstPtr: Any, color: Color, format: i32);
unsafe extern GetPixelDataSize(width: i32, height: i32, format: i32) -> i32;
unsafe extern GetFontDefault() -> Font;
unsafe extern LoadFont(fileName: &str) -> Font;
unsafe extern LoadFontEx(fileName: &str, fontSize: i32, codepoints: &i32, codepointCount: i32) -> Font;
unsafe extern LoadFontFromImage(image: Image, key: Color, firstChar: i32) -> Font;
unsafe extern LoadFontFromMemory(fileType: &str, fileData: &u8, dataSize: i32, fontSize: i32, codepoints: &i32, codepointCount: i32) -> Font;
unsafe extern IsFontReady(font: Font) -> bool;
unsafe extern LoadFontData(fileData: &u8, dataSize: i32, fontSize: i32, codepoints: &i32, codepointCount: i32, typ: i32) -> &GlyphInfo;
unsafe extern GenImageFontAtlas(glyphs: &GlyphInfo, glyphRecs: &&Rectangle, glyphCount: i32, fontSize: i32, padding: i32, packMethod: i32) -> Image;
unsafe extern UnloadFontData(glyphs: &GlyphInfo, glyphCount: i32);
unsafe extern UnloadFont(font: Font);
unsafe extern ExportFontAsCode(font: Font, fileName: &str) -> bool;
unsafe extern DrawFPS(posX: i32, posY: i32);
unsafe extern DrawText(text: &str, posX: i32, posY: i32, fontSize: i32, color: Color);
unsafe extern DrawTextEx(font: Font, text: &str, position: Vector2, fontSize: f32, spacing: f32, tint: Color);
unsafe extern DrawTextPro(font: Font, text: &str, position: Vector2, origin: Vector2, rotation: f32, fontSize: f32, spacing: f32, tint: Color);
unsafe extern DrawTextCodepoint(font: Font, codepoint: i32, position: Vector2, fontSize: f32, tint: Color);
unsafe extern DrawTextCodepoints(font: Font, codepoints: &i32, codepointCount: i32, position: Vector2, fontSize: f32, spacing: f32, tint: Color);
unsafe extern SetTextLineSpacing(spacing: i32);
unsafe extern MeasureText(text: &str, fontSize: i32) -> i32;
unsafe extern MeasureTextEx(font: Font, text: &str, fontSize: f32, spacing: f32) -> Vector2;
unsafe extern GetGlyphIndex(font: Font, codepoint: i32) -> i32;
unsafe extern GetGlyphInfo(font: Font, codepoint: i32) -> GlyphInfo;
unsafe extern GetGlyphAtlasRec(font: Font, codepoint: i32) -> Rectangle;
unsafe extern LoadUTF8(codepoints: &i32, length: i32) -> &str;
unsafe extern UnloadUTF8(text: &str);
unsafe extern LoadCodepoints(text: &str, count: &i32) -> &i32;
unsafe extern UnloadCodepoints(codepoints: &i32);
unsafe extern GetCodepointCount(text: &str) -> i32;
unsafe extern GetCodepoint(text: &str, codepointSize: &i32) -> i32;
unsafe extern GetCodepointNext(text: &str, codepointSize: &i32) -> i32;
unsafe extern GetCodepointPrevious(text: &str, codepointSize: &i32) -> i32;
unsafe extern CodepointToUTF8(codepoint: i32, utf8Size: &i32) -> &str;
unsafe extern TextCopy(dst: &str, src: &str) -> i32;
unsafe extern TextIsEqual(text1: &str, text2: &str) -> bool;
unsafe extern TextLength(text: &str) -> u32;
unsafe extern TextFormat(text: &str, ...) -> &str;
unsafe extern TextSubtext(text: &str, position: i32, length: i32) -> &str;
unsafe extern TextReplace(text: &str, replace: &str, by: &str) -> &str;
unsafe extern TextInsert(text: &str, insert: &str, position: i32) -> &str;
unsafe extern TextJoin(textList: &&str, count: i32, delimiter: &str) -> &str;
unsafe extern TextSplit(text: &str, delimiter: char, count: &i32) -> &&str;
unsafe extern TextAppend(text: &str, append: &str, position: &i32);
unsafe extern TextFindIndex(text: &str, find: &str) -> i32;
unsafe extern TextToUpper(text: &str) -> &str;
unsafe extern TextToLower(text: &str) -> &str;
unsafe extern TextToPascal(text: &str) -> &str;
unsafe extern TextToInteger(text: &str) -> i32;
unsafe extern DrawLine3D(startPos: Vector3, endPos: Vector3, color: Color);
unsafe extern DrawPoint3D(position: Vector3, color: Color);
unsafe extern DrawCircle3D(center: Vector3, radius: f32, rotationAxis: Vector3, rotationAngle: f32, color: Color);
unsafe extern DrawTriangle3D(v1: Vector3, v2: Vector3, v3: Vector3, color: Color);
unsafe extern DrawTriangleStrip3D(points: &Vector3, pointCount: i32, color: Color);
unsafe extern DrawCube(position: Vector3, width: f32, height: f32, length: f32, color: Color);
unsafe extern DrawCubeV(position: Vector3, size: Vector3, color: Color);
unsafe extern DrawCubeWires(position: Vector3, width: f32, height: f32, length: f32, color: Color);
unsafe extern DrawCubeWiresV(position: Vector3, size: Vector3, color: Color);
unsafe extern DrawSphere(centerPos: Vector3, radius: f32, color: Color);
unsafe extern DrawSphereEx(centerPos: Vector3, radius: f32, rings: i32, slices: i32, color: Color);
unsafe extern DrawSphereWires(centerPos: Vector3, radius: f32, rings: i32, slices: i32, color: Color);
unsafe extern DrawCylinder(position: Vector3, radiusTop: f32, radiusBottom: f32, height: f32, slices: i32, color: Color);
unsafe extern DrawCylinderEx(startPos: Vector3, endPos: Vector3, startRadius: f32, endRadius: f32, sides: i32, color: Color);
unsafe extern DrawCylinderWires(position: Vector3, radiusTop: f32, radiusBottom: f32, height: f32, slices: i32, color: Color);
unsafe extern DrawCylinderWiresEx(startPos: Vector3, endPos: Vector3, startRadius: f32, endRadius: f32, sides: i32, color: Color);
unsafe extern DrawCapsule(startPos: Vector3, endPos: Vector3, radius: f32, slices: i32, rings: i32, color: Color);
unsafe extern DrawCapsuleWires(startPos: Vector3, endPos: Vector3, radius: f32, slices: i32, rings: i32, color: Color);
unsafe extern DrawPlane(centerPos: Vector3, size: Vector2, color: Color);
unsafe extern DrawRay(ray: Ray, color: Color);
unsafe extern DrawGrid(slices: i32, spacing: f32);
unsafe extern LoadModel(fileName: &str) -> Model;
unsafe extern LoadModelFromMesh(mesh: Mesh) -> Model;
unsafe extern IsModelReady(model: Model) -> bool;
unsafe extern UnloadModel(model: Model);
unsafe extern GetModelBoundingBox(model: Model) -> BoundingBox;
unsafe extern DrawModel(model: Model, position: Vector3, scale: f32, tint: Color);
unsafe extern DrawModelEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: f32, scale: Vector3, tint: Color);
unsafe extern DrawModelWires(model: Model, position: Vector3, scale: f32, tint: Color);
unsafe extern DrawModelWiresEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: f32, scale: Vector3, tint: Color);
unsafe extern DrawBoundingBox(box: BoundingBox, color: Color);
unsafe extern DrawBillboard(camera: Camera3D, texture: Texture, position: Vector3, size: f32, tint: Color);
unsafe extern DrawBillboardRec(camera: Camera3D, texture: Texture, source: Rectangle, position: Vector3, size: Vector2, tint: Color);
unsafe extern DrawBillboardPro(camera: Camera3D, texture: Texture, source: Rectangle, position: Vector3, up: Vector3, size: Vector2, origin: Vector2, rotation: f32, tint: Color);
unsafe extern UploadMesh(mesh: &Mesh, dynamic: bool);
unsafe extern UpdateMeshBuffer(mesh: Mesh, index: i32, data: Any, dataSize: i32, offset: i32);
unsafe extern UnloadMesh(mesh: Mesh);
unsafe extern DrawMesh(mesh: Mesh, material: Material, transform: Matrix);
unsafe extern DrawMeshInstanced(mesh: Mesh, material: Material, transforms: &Matrix, instances: i32);
unsafe extern ExportMesh(mesh: Mesh, fileName: &str) -> bool;
unsafe extern GetMeshBoundingBox(mesh: Mesh) -> BoundingBox;
unsafe extern GenMeshTangents(mesh: &Mesh);
unsafe extern GenMeshPoly(sides: i32, radius: f32) -> Mesh;
unsafe extern GenMeshPlane(width: f32, length: f32, resX: i32, resZ: i32) -> Mesh;
unsafe extern GenMeshCube(width: f32, height: f32, length: f32) -> Mesh;
unsafe extern GenMeshSphere(radius: f32, rings: i32, slices: i32) -> Mesh;
unsafe extern GenMeshHemiSphere(radius: f32, rings: i32, slices: i32) -> Mesh;
unsafe extern GenMeshCylinder(radius: f32, height: f32, slices: i32) -> Mesh;
unsafe extern GenMeshCone(radius: f32, height: f32, slices: i32) -> Mesh;
unsafe extern GenMeshTorus(radius: f32, size: f32, radSeg: i32, sides: i32) -> Mesh;
unsafe extern GenMeshKnot(radius: f32, size: f32, radSeg: i32, sides: i32) -> Mesh;
unsafe extern GenMeshHeightmap(heightmap: Image, size: Vector3) -> Mesh;
unsafe extern GenMeshCubicmap(cubicmap: Image, cubeSize: Vector3) -> Mesh;
unsafe extern LoadMaterials(fileName: &str, materialCount: &i32) -> &Material;
unsafe extern LoadMaterialDefault() -> Material;
unsafe extern IsMaterialReady(material: Material) -> bool;
unsafe extern UnloadMaterial(material: Material);
unsafe extern SetMaterialTexture(material: &Material, mapType: i32, texture: Texture);
unsafe extern SetModelMeshMaterial(model: &Model, meshId: i32, materialId: i32);
unsafe extern LoadModelAnimations(fileName: &str, animCount: &i32) -> &ModelAnimation;
unsafe extern UpdateModelAnimation(model: Model, anim: ModelAnimation, frame: i32);
unsafe extern UnloadModelAnimation(anim: ModelAnimation);
unsafe extern UnloadModelAnimations(animations: &ModelAnimation, animCount: i32);
unsafe extern IsModelAnimationValid(model: Model, anim: ModelAnimation) -> bool;
unsafe extern CheckCollisionSpheres(center1: Vector3, radius1: f32, center2: Vector3, radius2: f32) -> bool;
unsafe extern CheckCollisionBoxes(box1: BoundingBox, box2: BoundingBox) -> bool;
unsafe extern CheckCollisionBoxSphere(box: BoundingBox, center: Vector3, radius: f32) -> bool;
unsafe extern GetRayCollisionSphere(ray: Ray, center: Vector3, radius: f32) -> RayCollision;
unsafe extern GetRayCollisionBox(ray: Ray, box: BoundingBox) -> RayCollision;
unsafe extern GetRayCollisionMesh(ray: Ray, mesh: Mesh, transform: Matrix) -> RayCollision;
unsafe extern GetRayCollisionTriangle(ray: Ray, p1: Vector3, p2: Vector3, p3: Vector3) -> RayCollision;
unsafe extern GetRayCollisionQuad(ray: Ray, p1: Vector3, p2: Vector3, p3: Vector3, p4: Vector3) -> RayCollision;
$TODO: Codegen FuncPtr $ struct AudioCallback {}
unsafe extern InitAudioDevice();
unsafe extern CloseAudioDevice();
unsafe extern IsAudioDeviceReady() -> bool;
unsafe extern SetMasterVolume(volume: f32);
unsafe extern GetMasterVolume() -> f32;
unsafe extern LoadWave(fileName: &str) -> Wave;
unsafe extern LoadWaveFromMemory(fileType: &str, fileData: &u8, dataSize: i32) -> Wave;
unsafe extern IsWaveReady(wave: Wave) -> bool;
unsafe extern LoadSound(fileName: &str) -> Sound;
unsafe extern LoadSoundFromWave(wave: Wave) -> Sound;
unsafe extern LoadSoundAlias(source: Sound) -> Sound;
unsafe extern IsSoundReady(sound: Sound) -> bool;
unsafe extern UpdateSound(sound: Sound, data: Any, sampleCount: i32);
unsafe extern UnloadWave(wave: Wave);
unsafe extern UnloadSound(sound: Sound);
unsafe extern UnloadSoundAlias(alias: Sound);
unsafe extern ExportWave(wave: Wave, fileName: &str) -> bool;
unsafe extern ExportWaveAsCode(wave: Wave, fileName: &str) -> bool;
unsafe extern PlaySound(sound: Sound);
unsafe extern StopSound(sound: Sound);
unsafe extern PauseSound(sound: Sound);
unsafe extern ResumeSound(sound: Sound);
unsafe extern IsSoundPlaying(sound: Sound) -> bool;
unsafe extern SetSoundVolume(sound: Sound, volume: f32);
unsafe extern SetSoundPitch(sound: Sound, pitch: f32);
unsafe extern SetSoundPan(sound: Sound, pan: f32);
unsafe extern WaveCopy(wave: Wave) -> Wave;
unsafe extern WaveCrop(wave: &Wave, initSample: i32, finalSample: i32);
unsafe extern WaveFormat(wave: &Wave, sampleRate: i32, sampleSize: i32, channels: i32);
unsafe extern LoadWaveSamples(wave: Wave) -> &f32;
unsafe extern UnloadWaveSamples(samples: &f32);
unsafe extern LoadMusicStream(fileName: &str) -> Music;
unsafe extern LoadMusicStreamFromMemory(fileType: &str, data: &u8, dataSize: i32) -> Music;
unsafe extern IsMusicReady(music: Music) -> bool;
unsafe extern UnloadMusicStream(music: Music);
unsafe extern PlayMusicStream(music: Music);
unsafe extern IsMusicStreamPlaying(music: Music) -> bool;
unsafe extern UpdateMusicStream(music: Music);
unsafe extern StopMusicStream(music: Music);
unsafe extern PauseMusicStream(music: Music);
unsafe extern ResumeMusicStream(music: Music);
unsafe extern SeekMusicStream(music: Music, position: f32);
unsafe extern SetMusicVolume(music: Music, volume: f32);
unsafe extern SetMusicPitch(music: Music, pitch: f32);
unsafe extern SetMusicPan(music: Music, pan: f32);
unsafe extern GetMusicTimeLength(music: Music) -> f32;
unsafe extern GetMusicTimePlayed(music: Music) -> f32;
unsafe extern LoadAudioStream(sampleRate: u32, sampleSize: u32, channels: u32) -> AudioStream;
unsafe extern IsAudioStreamReady(stream: AudioStream) -> bool;
unsafe extern UnloadAudioStream(stream: AudioStream);
unsafe extern UpdateAudioStream(stream: AudioStream, data: Any, frameCount: i32);
unsafe extern IsAudioStreamProcessed(stream: AudioStream) -> bool;
unsafe extern PlayAudioStream(stream: AudioStream);
unsafe extern PauseAudioStream(stream: AudioStream);
unsafe extern ResumeAudioStream(stream: AudioStream);
unsafe extern IsAudioStreamPlaying(stream: AudioStream) -> bool;
unsafe extern StopAudioStream(stream: AudioStream);
unsafe extern SetAudioStreamVolume(stream: AudioStream, volume: f32);
unsafe extern SetAudioStreamPitch(stream: AudioStream, pitch: f32);
unsafe extern SetAudioStreamPan(stream: AudioStream, pan: f32);
unsafe extern SetAudioStreamBufferSizeDefault(size: i32);
unsafe extern SetAudioStreamCallback(stream: AudioStream, callback: AudioCallback);
unsafe extern AttachAudioStreamProcessor(stream: AudioStream, processor: AudioCallback);
unsafe extern DetachAudioStreamProcessor(stream: AudioStream, processor: AudioCallback);
unsafe extern AttachAudioMixedProcessor(processor: AudioCallback);
unsafe extern DetachAudioMixedProcessor(processor: AudioCallback);

struct Rect {
    pos: Vector2;
    vel: Vector2;
    size: Vector2;

    func update(&mut this) {
        // this.vel.x = this.vel.x + 1;
        this.pos.x = this.pos.x + this.vel.x;
        this.pos.y = this.pos.y + this.vel.y;
    }
}

unsafe func main() -> i32 {
    InitWindow(1600, 900, "Hello World! WOW AMAZING");
    SetTargetFPS(60);
    InitAudioDevice();
    // only works when run using `cargo run -- -i raylib\lib\raylib\include\raylib_pp.bu -r` in the root directory
    // if you want to run it from `./out/`, you need to change the path to `../` instead of `./`
    let wav: Wave = LoadWave("./raylib/metal_pipe.wav");
    let sound: Sound = LoadSoundFromWave(wav);
    // PlaySound(sound); // SOUND WARNING :^)

    let w: f32 = 1600;
    let h: f32 = 900;
    let recth: f32 = 300;
    mut rect: Rect = Rect {
        pos: Vector2 {
            x: 0,
            y: h / 2 - recth / 2
        },
        vel: Vector2 {
            x: 5,
            y: 5
        },
        size: Vector2 {
            x: 100,
            y: 200
        }
    };
    while (WindowShouldClose() == false) {
        BeginDrawing();
        ClearBackground(Color { r: 0, g: 255, b: 0, a: 255 });
        DrawRectangleV(
            rect.pos, 
            rect.size,
            Color { r: 255, g: 0, b: 0, a: 255 });
        DrawText("WOW", 100, 200, 200, Color {
            g: 0,
            b: 255,
            a: 255,
            r: 0
        });
        EndDrawing();
        rect.update();
    }
    return 0;
}